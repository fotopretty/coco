'use strict';Object.defineProperty(exports, "__esModule", { value: true });

var _crypto = require('crypto');var _crypto2 = _interopRequireDefault(_crypto);

var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);
var _axiosError = require('axios-error');var _axiosError2 = _interopRequireDefault(_axiosError);
var _warning = require('warning');var _warning2 = _interopRequireDefault(_warning);
var _invariant = require('invariant');var _invariant2 = _interopRequireDefault(_invariant);
var _imageType = require('image-type');var _imageType2 = _interopRequireDefault(_imageType);

var _Line = require('./Line');var _Line2 = _interopRequireDefault(_Line);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}

























function handleError(err) {var _err$response$data =
  err.response.data;const message = _err$response$data.message,details = _err$response$data.details;
  let msg = `LINE API - ${message}`;
  if (details && details.length > 0) {
    details.forEach(detail => {
      msg += `\n- ${detail.property}: ${detail.message}`;
    });
  }
  throw new _axiosError2.default(msg, err);
}







class LineClient {









  constructor(
  accessTokenOrConfig,
  channelSecret)
  {_initialiseProps.call(this);
    let origin;
    if (accessTokenOrConfig && typeof accessTokenOrConfig === 'object') {
      const config = accessTokenOrConfig;

      this._accessToken = config.accessToken;
      this._channelSecret = config.channelSecret;
      origin = config.origin;
    } else {
      this._accessToken = accessTokenOrConfig;
      this._channelSecret = channelSecret;
    }

    this._axios = _axios2.default.create({
      baseURL: `${origin || 'https://api.line.me'}/v2/bot/`,
      headers: {
        Authorization: `Bearer ${this._accessToken}`,
        'Content-Type': 'application/json' } });


  }

  get axios() {
    return this._axios;
  }

  get accessToken() {
    return this._accessToken;
  }


























































  /**
     * Imagemap Message
     *
     * https://devdocs.line.me/en/#imagemap-message
     */


































  /**
         * Template Messages
         *
         * https://devdocs.line.me/en/#template-messages
         */



























































































  /**
             * Reply Message
             *
             * https://devdocs.line.me/en/#reply-message
             */












  /**
                 * Push Message
                 *
                 * https://devdocs.line.me/en/#push-message
                 */











  /**
                     * Multicast
                     *
                     * https://devdocs.line.me/en/#multicast
                     */














  /**
                         * Content
                         *
                         * https://devdocs.line.me/en/#content
                         */





  /**
                             * Get User Profile
                             *
                             * https://devdocs.line.me/en/#bot-api-get-profile
                             * displayName, userId, pictureUrl, statusMessage
                             */



  /**
                                 * Get Group/Room Member Profile
                                 *
                                 * https://devdocs.line.me/en/#get-group-room-member-profile
                                 */










  /**
                                     * Get Group/Room Member IDs
                                     *
                                     * https://devdocs.line.me/en/#get-group-room-member-ids
                                     */












































  /**
                                         * Leave
                                         *
                                         * https://devdocs.line.me/en/#leave
                                         */










  /**
                                             * Rich Menu
                                             *
                                             * https://developers.line.me/en/docs/messaging-api/reference/#rich-menu
                                             */

































  /**
                                                 * - Images must have one of the following resolutions: 2500x1686, 2500x843.
                                                 * - You cannot replace an image attached to a rich menu.
                                                 *   To update your rich menu image, create a new rich menu object and upload another image.
                                                 */




















  /**
                                                     * Signature Validation
                                                     *
                                                     * https://devdocs.line.me/en/#webhooks
                                                     */}exports.default = LineClient;LineClient.connect = (accessTokenOrConfig, channelSecret) => new LineClient(accessTokenOrConfig, channelSecret);var _initialiseProps = function _initialiseProps() {var _this = this;this._send = (type, target, ...args) => {if (type === 'push') {return this.push(target, ...args);} else if (type === 'multicast') {return this.multicast(target, ...args);}return this.reply(target, ...args);};this._sendText = (type, target, text) => this._send(type, target, [_Line2.default.createText(text)]);this._sendImage = (type, target, contentUrl, previewUrl) => this._send(type, target, [_Line2.default.createImage(contentUrl, previewUrl)]);this._sendVideo = (type, target, contentUrl, previewUrl) => this._send(type, target, [_Line2.default.createVideo(contentUrl, previewUrl)]);this._sendAudio = (type, target, contentUrl, duration) => this._send(type, target, [_Line2.default.createAudio(contentUrl, duration)]);this._sendLocation = (type, target, { title, address, latitude, longitude }) => this._send(type, target, [_Line2.default.createLocation({ title, address, latitude, longitude })]);this._sendSticker = (type, target, packageId, stickerId) => this._send(type, target, [_Line2.default.createSticker(packageId, stickerId)]);this._sendImagemap = (type, target, altText, { baseUrl, baseSize, baseHeight, baseWidth, actions }) => this._send(type, target, [{ type: 'imagemap', baseUrl, altText, baseSize: baseSize || { height: baseHeight, width: baseWidth }, actions }]);this._sendTemplate = (type, target, altText, template) => this._send(type, target, [_Line2.default.createTemplate(altText, template)]);this._sendButtonTemplate = (type, target, altText, { thumbnailImageUrl, imageAspectRatio, imageSize, imageBackgroundColor, title, text, actions }) => this._send(type, target, [_Line2.default.createButtonTemplate(altText, { thumbnailImageUrl, imageAspectRatio, imageSize, imageBackgroundColor, title, text, actions })]);this._sendConfirmTemplate = (type, target, altText, { text, actions }) => this._send(type, target, [_Line2.default.createConfirmTemplate(altText, { text, actions })]);this._sendCarouselTemplate = (type, target, altText, columns, { imageAspectRatio, imageSize } = {}) => this._send(type, target, [_Line2.default.createCarouselTemplate(altText, columns, { imageAspectRatio, imageSize })]);this._sendImageCarouselTemplate = (type, target, altText, columns) => this._send(type, target, [_Line2.default.createImageCarouselTemplate(altText, columns)]);this.replyRawBody = body => this._axios.post('/message/reply', body).then(res => res.data, handleError);this.reply = (replyToken, messages) => this.replyRawBody({ replyToken, messages });this.pushRawBody = body => this._axios.post('/message/push', body).then(res => res.data, handleError);this.push = (to, messages) => this.pushRawBody({ to, messages });this.multicastRawBody = body => this._axios.post('/message/multicast', body).then(res => res.data, handleError);this.multicast = (to, messages) => this.multicastRawBody({ to, messages });this.retrieveMessageContent = messageId => this._axios.get(`/message/${messageId}/content`, { responseType: 'arraybuffer' }).then(res => Buffer.from(res.data), handleError);this.getUserProfile = userId => this._axios.get(`/profile/${userId}`).then(res => res.data, handleError);this.getGroupMemberProfile = (groupId, userId) => this._axios.get(`/group/${groupId}/member/${userId}`).then(res => res.data, handleError);this.getRoomMemberProfile = (roomId, userId) => this._axios.get(`/room/${roomId}/member/${userId}`).then(res => res.data, handleError);this.getGroupMemberIds = (groupId, start) => this._axios.get(`/group/${groupId}/members/ids${start ? `?start=${start}` : ''}`).then(res => res.data, handleError);this.getAllGroupMemberIds = (() => {var _ref = _asyncToGenerator(function* (groupId) {let allMemberIds = [];let continuationToken;do {// eslint-disable-next-line no-await-in-loop
        var _ref2 = yield _this.getGroupMemberIds(groupId, continuationToken);const memberIds = _ref2.memberIds,next = _ref2.next;allMemberIds = allMemberIds.concat(memberIds);continuationToken = next;} while (continuationToken);return allMemberIds;});return function (_x) {return _ref.apply(this, arguments);};})();this.getRoomMemberIds = (roomId, start) => this._axios.get(`/room/${roomId}/members/ids${start ? `?start=${start}` : ''}`).then(res => res.data, handleError);this.getAllRoomMemberIds = (() => {var _ref3 = _asyncToGenerator(function* (roomId) {let allMemberIds = [];let continuationToken;do {// eslint-disable-next-line no-await-in-loop
        var _ref4 = yield _this.getRoomMemberIds(roomId, continuationToken);const memberIds = _ref4.memberIds,next = _ref4.next;allMemberIds = allMemberIds.concat(memberIds);continuationToken = next;} while (continuationToken);return allMemberIds;});return function (_x2) {return _ref3.apply(this, arguments);};})();this.leaveGroup = groupId => this._axios.post(`/group/${groupId}/leave`).then(res => res.data, handleError);this.leaveRoom = roomId => this._axios.post(`/room/${roomId}/leave`).then(res => res.data, handleError);this.getRichMenuList = () => this._axios.get('/richmenu/list').then(res => res.data.richmenus, handleError);this.getRichMenu = richMenuId => this._axios.get(`/richmenu/${richMenuId}`).then(res => res.data, handleError);this.createRichMenu = richMenu => this._axios.post('/richmenu', richMenu).then(res => res.data, handleError);this.deleteRichMenu = richMenuId => this._axios.delete(`/richmenu/${richMenuId}`).then(res => res.data, handleError);this.getLinkedRichMenu = userId => this._axios.get(`/user/${userId}/richmenu`).then(res => res.data, handleError);this.linkRichMenu = (userId, richMenuId) => this._axios.post(`/user/${userId}/richmenu/${richMenuId}`).then(res => res.data, handleError);this.unlinkRichMenu = userId => this._axios.delete(`/user/${userId}/richmenu`).then(res => res.data, handleError);this.uploadRichMenuImage = (richMenuId, image) => {const type = (0, _imageType2.default)(image);(0, _invariant2.default)(type && (type.mime === 'image/jpeg' || type.mime === 'image/png'), 'Image must be `image/jpeg` or `image/png`');return this._axios.post(`/richmenu/${richMenuId}/content`, image, { headers: { 'Content-Type': type.mime } }).then(res => res.data, handleError);};this.downloadRichMenuImage = richMenuId => this._axios.get(`/richmenu/${richMenuId}/content`, { responseType: 'arraybuffer' }).then(res => Buffer.from(res.data), handleError);this.isValidSignature = (rawBody, signature) => {(0, _warning2.default)(
    false,
    "`isValidSignature` is deprecated. Client doesn't take responsibility for signature validation.");

    return (
      signature ===
      _crypto2.default.
      createHmac('sha256', this._channelSecret).
      update(rawBody, 'utf8').
      digest('base64'));

  };};


const sendTypes = ['reply', 'push', 'multicast'];

const messageTypes = [
'Text',
'Image',
'Video',
'Audio',
'Location',
'Sticker',
'Imagemap',
'Template',
'ButtonTemplate',
'ConfirmTemplate',
'CarouselTemplate',
'ImageCarouselTemplate'];


sendTypes.forEach(sendType => {
  messageTypes.forEach(messageType => {
    Object.defineProperty(LineClient.prototype, `${sendType}${messageType}`, {
      enumerable: false,
      configurable: true,
      writable: true,
      value(target, ...args) {
        return this[`_send${messageType}`](sendType, target, ...args);
      } });

  });
});